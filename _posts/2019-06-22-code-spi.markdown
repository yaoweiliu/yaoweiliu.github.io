layout:     post
title:      "code-spi"
subtitle:   ""
date:       2018-06-22 17:41:00
author:     "刘念真"
header-img: "img/post-bg-js-module.jpg"
tags: form lofter

* Read the fucking source code!

可参考boardService内的FPGA相关驱动代码:
struct spi_driver--->spi外设驱动,类似i2c_driver/platform_driver
spi_register_driver()--->注册
spi_unregister_driver()--->注销

struct spi_device--->spi外设,一般注册于板级信息内,个人猜测类似与i2c_client的生成过程,内核经spi_board_info生成spi_device(待核实)

struct spi_transfer--->读/写缓存
struct spi_message--->交互的消息
spi_message_init()--->初始化spi_message
spi_message_add_tail()--->将spi_transfer加到spi_message的链表内
spi_sync()--->同步传输消息
spi_async()--->异步传输消息

spi_message的成员: |---void (*complete)(void *context);|
                                    |---void *context;                             |这两者用于消息异步传输完成时的callback函数;

spi_transfer的成员: |---const void *tx_buf;|
                                   |---void *rx_buf;          |
                                   |---unsigned len;         |
                                   |---u8 bits_per_word;  |
                                   |---u16 delay_usecs;   |
                                   |---u32 speed_hz;       |这几个成员一般都要初始化,若要用到DMA相关的操作,则要初始化DMA相关信息





**待补充**:
spi控制器驱动，这种控制器驱动模型应该属于platform_driver，在probe函数内进行spi_master的添加和初始化操作。
struct spi_master

spi_register_master()

spi_unregister_master()

spi_master_set_devdata()

spi_master_get_devdata()



