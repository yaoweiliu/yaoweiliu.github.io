---
layout:     post
title:      "dts"
subtitle:   ""
date:       2019-07-08 00:00:00
author:     "刘念真"
header-img: "img/post-bg-js-module.jpg"
tags: Linux-dts
---

`Linux dts`学习，两种编辑方法：

1. 可以找到自己板子对应的dts文件，添加相应的节点描述设备信息。
2. 新建文件，如`demo.dtsi`，在该文件内添加节点来描述设备信息，之后在板子对应的dts文件的开始处添加`#include demo.dtsi`。
3. 在设备驱动程序内注册`platform_driver`，通过`platform_driver.driver.of_match_table`的`compatible`来匹配调用`probe`接口。
4. 补充3中的内容：首先判断一个节点(device)从属于哪种总线(bus)，如果从属于spi_bus_type，就需要注册spi_driver而不是platform_driver，i2c同理；但是如果一个节点是根节点(/)的直接子节点，一般就需要注册platform_driver，一般根节点(/)的第一级子节点都是各种控制器设备，所以这些节点属于platform_device；定义一个of_match_table的数组变量，并赋值给spi_driver.driver.of_match_table。[spi_driver可以是其他high level的driver，如i2c_driver、pci_driver等]。
5. 补充4中关于platform_device的填充：arch/arm/kernel/setup.c/customize_machine()/of_platform_populate()/of_platform_bus_create()；关于i2c_client的填充：of_i2c_register_devices()。
6. 要注释掉一个节点：添加属性`status = "disabled";`即可。可以用`platform_get_resource()`获得`reg`属性的值。
7. kernel解析dtb：init/main.c/start_kernel()/setup_arch()/setup_machine_fdt()/unflatten_device_tree()/early_init_dt_scan_nodes()等。
8. 各种`dts`接口的介绍及使用：

```c
   const void *of_get_property(const struct device_node *np, const
   char *name, int *lenp)
   参数 np 指向一个device node；name 参数为需要查找属性的名字；lenp 参数用于存
   储属性的长度。函数通过调用 of_find_property() 函数获得属性的结构 property，
   如果获得成功，则返回属性的值；如果失败则返回 NULL。具体实现参见
   drivers/of/base.c文件。
```

```
   #define for_each_available_child_of_node(parent, child) \
       for (child = of_get_next_available_child(parent, NULL); child != NULL; \
            child = of_get_next_available_child(parent, child))
   函数作用：用于遍历节点里的所有可用子节点（status属性值为“okay”）
   参数parent指向当前节点；child指向子节点。
   函数在for循环中，调用of_get_next_available_child(parent，NULL)函数获得
   parent的第一个可用的子节点，只要child不为NULL，循环继续运行。函数继续调用
   of_get_next_available_child(parent, child)函数获得child子节点的下一个可
   用子节点，以此达到循环的效果。
```

```c
   #define for_each_child_of_node(parent, child) \
       for (child = of_get_next_child(parent, NULL); child != NULL; \
            child = of_get_next_child(parent, child))
   函数作用：用于遍历节点里的所有子节点。
   参数parent指向当前节点；child指向子节点，首次可置为NULL
   函数在for循环中，调用of_get_next_child(parent，NULL)函数获得parent的第一
   个子节点，只要child不为NULL，循环继续运行。函数继续调用
   of_get_next_child(parent, child)函数获得child子节点的下一个子节点，以此达
   到循环的效果。
```

```c
   #define for_each_compatible_node(dn, type, compatible) \
       for (dn = of_find_compatible_node(NULL, type, compatible); dn; \
            dn = of_find_compatible_node(dn, type, compatible))
   函数作用：通过 compatible 属性找到所有对应的 device node。
   参数dn指向device_node;参数type指向属性类型;compatible指向compatible属性名
   字。
   函数首先调用of_find_compatble_node(NULL,type,compatible)函数获得第一个
   compatible属性名字是compatible的节点，然后for循环中，只要dn节点不为空，那么
   循环继续。循环完一次之后，再调用of_find_compatible_node()函数获得下一个满足
   要求的节点。
```

```c
   #define for_each_matching_node(dn, matches) \
       for (dn = of_find_matching_node(NULL, matches); dn; \
            dn = of_find_matching_node(dn, matches))
   函数作用：通过 device_id 列表遍历所有的 device node。
   dn 指向 device node; matches 指向已知的device id list。
   函数首先调用 of_find_matching_node(NULL, matches) 函数获得 device_id
   list的第一个device node，存储在 dn 参数里。只要dn不为NULL，则for循环继续。
   使用 of_find_matching_node(dn, matches) 函数获得下一个device id list
   的下一个 device node。
   
   static inline struct device_node *of_find_matching_node(struct 
   device_node *from, const struct of_device_id *matches)
   {
      return of_find_matching_node_and_match(from, matches, NULL);
   }
   参数from指向开始查找的device node；matches指向一个已知的device_id列表。
   函数直接调用 of_find_matching_node_and_match() 函数获得 device_id 对应
   的节点。
```

```c
   int of_property_read_u32_array(const struct device_node *np, const
   char *propname, u32 *out_values, size_t sz)
   函数作用：读取节点中的32位整形数组的值。
   参数 np 指向当前节点；propbane 参数指向属性的名字；out_values 参数用于存储整
   形数组的指针；sz 参数用于执行需要读取32位整形的数量。
   函数首先调用 of_find_property_value_of_size() 函数获得属性对应的属性值。然
   后进行判断之后，将每个属性值存储到out_values中。
   成功返回0，反之返回错误码。
```
```c
   static inline unsigned long of_read_ulong(const __be32 *cell, int 
   size)
   {
      return of_read_number(cell, size);
   }
   函数作用：读取一个属性的值，值长度为 32 为。
   参数 cell 指向属性值的地址；size 指向属性值的第 n 个 ulong 值
   函数直接调用 of_read_number() 函数获得指定的属性值。
```

**注意点**：1. 如果属性值的类型是` u32`，那么其值以大端模式表示，高字节在低地址存放。
2. #address-cells表示用几个cell表示地址，#size-cells表示用几个cell表示地址长度，dts语法用#address-cells和#size-cells组织reg属性，之后通过reg属性构建IORESOURCE_MEM类型的资源供driver使用，比如：

   ```c
   Example1
   / {
       #address-cells = <0x1>; //在 root node下使用1个u32来代表address。
       #size-cells = <0x0>; // 在root node下使用0个u32来代表size。
       ...
       ...
       memory {        // memory device
           ...
           reg = <0x90000000>;
               // 0x90000000是存取memory的address
           ...
       };
       ...
       ...
   }
   
   Example2
   / {
       #address-cells = <0x1>; //在root node下使用1个u32来代表address。
       #size-cells = <0x1>; //在root node下使用1个u32来代表size。
       ...
       ...
       memory { // memory device
           ...
           reg = <0x90000000 0x800000>;
               // 0x90000000 是存取 memory 的 address
               // 0x800000 是 memory 的 size。
           ...
       };
       ...
       ...
   }
   
   Example3
   / {
       #address-cells = <0x2>; // 在root node下使用2个u32来代表address。
       #size-cells = <0x1>; // 在root node下使用1个u32来代表size。
       ...
       ...
       memory { // memory device
           ...
           reg = <0x90000000 00000000 0x800000>;
               // 0x90000000 00000000 是存取memory的address
               // 0x800000 是memory的size。
           ...
       };
       ...
       ...
   }
   
   Example4
   / {
       #address-cells = <0x2>; // 在root node下使用2个u32来代表address。
       #size-cells = <0x2>; // 在root node下使用2个u32来代表size。
       ...
       ...
       memory { // memory device
           ...
           reg = <0x90000000 00000000 0x800000 00000000>;
               // 0x90000000 00000000 是存取memory的address
               // 0x800000 00000000 是memory的size。
           ...
       };
       ...
       ...
   }
   ```
